#![allow(dead_code)]

use std::fmt;

const VALID_CHARS: [char; 8] = ['+', '-', '>', '<', '.', ',', '[', ']'];

struct Brainfuck {
    cells: [u8; 30000],
    cell_pointer: usize,
    code_pointer: usize,
}

impl fmt::Display for Brainfuck {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let to_print: String = self
            .cells
            .iter()
            .enumerate()
            .map(|(i, cell)| {
                if i == self.cell_pointer {
                    String::from("hmm")
                } else {
                    format!("{}", cell)
                }
            })
            .collect();
        write!(f, "{}", to_print)
    }
}

impl Brainfuck {
    fn new() -> Brainfuck {
        Brainfuck {
            cells: [0; 30000],
            cell_pointer: 0,
            code_pointer: 0,
        }
    }

    fn run_stream(&mut self, code: &String) {
        let code: String = code
            .chars()
            .filter(|token| VALID_CHARS.contains(&token))
            .collect();
        let bracemap: HashMap<usize, usize> = code.chars().enumerate().filter_map()
        while self.code_pointer < code.len() {
            let token = &code[self.code_pointer..self.code_pointer + 1];
            match token {
                "+" => {
                    let cell = &mut self.cells[self.cell_pointer];
                    *cell = cell.wrapping_add(1);
                }
                "-" => {
                    let cell = &mut self.cells[self.cell_pointer];
                    *cell = cell.wrapping_sub(1);
                }
                ">" => {
                    self.cell_pointer += 1;
                }
                "<" => {
                    self.cell_pointer -= 1;
                }
                "." => {
                    print!("{}", self.cells[self.cell_pointer]);
                }
                _ => (),
            }
            self.code_pointer += 1;
        }
    }
}

fn main() {
    let code = String::from("++--+++");
    let mut b = Brainfuck::new();
    // dbg!(b.cells);
    b.run_stream(&code);
    dbg!(&b.cells[..5]);
}
